package io.net.text.bo

import com.fasterxml.jackson.annotation.JsonInclude
import com.fasterxml.jackson.annotation.JsonProperty
import java.io.Serializable

/**
 * <p>Each object has a role (either "system", "user", or "assistant") and content (the content of the message). Conversations can be as short as 1 message or fill many pages.</p>
 * <p>Typically, a conversation is formatted with a system message first, followed by alternating user and assistant messages.</p>
 * <p>The system message helps set the behavior of the assistant. In the example above, the assistant was instructed with "You are a helpful assistant."<br>
 * The user messages help instruct the assistant. They can be generated by the end users of an application, or set by a developer as an instruction.<br>
 * The assistant messages help store prior responses. They can also be written by a developer to help give examples of desired behavior.
 * </p>
 *
 * see <a href="https://platform.openai.com/docs/guides/chat/introduction">OpenAi documentation</a>
 */
class ChatMessage() : Serializable {
    /**
     * Must be either 'system', 'user', 'assistant' or 'function'.<br></br>
     * You may use [ChatMessageRole] enum.
     */
    var role: String? = null

    // content should always exist in the call, even if it is null
    @JsonInclude
    var content: String? = null

    //name is optional, The name of the author of this message. May contain a-z, A-Z, 0-9, and underscores, with a maximum length of 64 characters.
    var name: String? = null

    @JsonProperty("function_call")
    var functionCall: ChatFunctionCall? = null

    constructor(role: String, content: String) : this() {
        this.role = role
        this.content = content
    }

    constructor(role: String, content: String, name: String?) : this() {
        this.role = role
        this.content = content
        this.name = name
    }

    override fun equals(other: Any?): Boolean {
        if (this === other) return true
        if (other !is ChatMessage) return false

        if (role != other.role) return false
        if (content != other.content) return false
        if (name != other.name) return false
        return functionCall == other.functionCall
    }

    override fun hashCode(): Int {
        var result = role.hashCode()
        result = 31 * result + content.hashCode()
        result = 31 * result + (name?.hashCode() ?: 0)
        result = 31 * result + (functionCall?.hashCode() ?: 0)
        return result
    }

    override fun toString(): String {
        return "ChatMessage(" +
                "role='$role', " +
                "content='$content', " +
                "name=$name, " +
                "functionCall=$functionCall" +
                ")"
    }

}
